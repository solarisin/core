name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build-analyze-release:
    runs-on: ubuntu-latest
    
    env:
      TRX_DIRECTORY: ./test/output/Release
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup .NET build dependencies
        uses: ./.github/workflows/composite/bootstrap-dotnet
        with:
          github-packages: true
          github-username: ${{ github.actor }}
          github-secret: ${{ secrets.GITHUB_TOKEN }}

      - name: .NET Build Solution
        run: |
          dotnet build ./Solarisin.Core.sln --configuration Release

      - name: .NET Execute Unit Tests
        run: |
          dotnet test ./Solarisin.Core.sln --collect:"XPlat Code Coverage" --settings coverlet.runsettings --logger:trx --no-restore --verbosity detailed --configuration Release --results-directory ${{ env.TRX_DIRECTORY }}

      - name: Parse Trx files
        if: ${{ always() }}
        uses: solarisin/trx-parser@dev3
        id: trx-parser
        with:
          TRX_PATH: ${{ env.TRX_DIRECTORY }}
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BADGE_STYLE: emoji
          
  build-analyze-debug:
    runs-on: windows-latest
    
    env:
      TRX_DIRECTORY: ./test/output/Debug

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup .NET build dependencies
        uses: ./.github/workflows/composite/bootstrap-dotnet
        with:
          github-packages: true
          github-username: ${{ github.actor }}
          github-secret: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit == 'false'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Start Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"solarisin_core_AYDQuREZCjPSIaQFyj5P" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /s:${{ github.workspace }}/SonarQube.Analysis.xml

      - name: .NET Build Solution
        run: |
          dotnet build ./Solarisin.Core.sln --configuration Debug

      - name: .NET Execute Unit Tests
        run: |
          dotnet test ./Solarisin.Core.sln --collect:"XPlat Code Coverage" --settings coverlet.runsettings --logger:trx --no-restore --verbosity detailed --configuration Debug --results-directory ${{ env.TRX_DIRECTORY }}

      - name: End Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Parse Trx files
        if: ${{ always() }}
        uses: solarisin/trx-parser@dev3
        id: trx-parser
        with:
          TRX_PATH: ${{ env.TRX_DIRECTORY }}
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BADGE_STYLE: emoji
